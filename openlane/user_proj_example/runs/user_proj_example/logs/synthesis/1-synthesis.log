
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.22 (git sha1 f109fa3d4c5, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /home/xb4syf/ASIC/gf180-demo/caravel/verilog/rtl/defines.v
Parsing SystemVerilog input from `/home/xb4syf/ASIC/gf180-demo/caravel/verilog/rtl/defines.v' to AST representation.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /home/xb4syf/ASIC/gf180-demo/openlane/user_proj_example/../../verilog/rtl/plant_example.v
Parsing SystemVerilog input from `/home/xb4syf/ASIC/gf180-demo/openlane/user_proj_example/../../verilog/rtl/plant_example.v' to AST representation.
Generating RTLIL representation for module `\plant_example'.
Generating RTLIL representation for module `\fsm_plant_opt'.
Successfully finished Verilog frontend.

3. Generating Graphviz representation of design.
Writing dot description to `/home/xb4syf/ASIC/gf180-demo/openlane/user_proj_example/runs/22_12_05_10_22/tmp/synthesis/hierarchy.dot'.
Dumping module plant_example to page 1.

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Analyzing design hierarchy..
Top module:  \plant_example
Used module:     \fsm_plant_opt

4.2. Analyzing design hierarchy..
Top module:  \plant_example
Used module:     \fsm_plant_opt
Removed 0 unused modules.
Warning: Resizing cell port plant_example.fsm_plant_opt.ac from 38 bits to 2 bits.
Warning: Resizing cell port plant_example.fsm_plant_opt.pump from 38 bits to 1 bits.
Warning: Resizing cell port plant_example.fsm_plant_opt.water from 38 bits to 4 bits.
Warning: Resizing cell port plant_example.fsm_plant_opt.temperature from 4 bits to 3 bits.
WARNING: TRISTATE_BUFFER_MAP is defined but could not be found: /localtmp/asic/gf180/pdk//gf180mcuC/libs.tech/openlane/gf180mcu_fd_sc_mcu7t5v0/tribuff_map.v

5. Executing SYNTH pass.

5.1. Executing HIERARCHY pass (managing design hierarchy).

5.1.1. Analyzing design hierarchy..
Top module:  \plant_example
Used module:     \fsm_plant_opt

5.1.2. Analyzing design hierarchy..
Top module:  \plant_example
Used module:     \fsm_plant_opt
Removed 0 unused modules.

5.2. Executing PROC pass (convert processes to netlists).

5.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

5.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 6 assignments to connections.

5.2.4. Executing PROC_INIT pass (extract init attributes).

5.2.5. Executing PROC_ARST pass (detect async resets in processes).

5.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

5.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\fsm_plant_opt.$proc$/home/xb4syf/ASIC/gf180-demo/openlane/user_proj_example/../../verilog/rtl/plant_example.v:917$373'.

5.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

5.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\fsm_plant_opt.\state_temperature_synth_0' using process `\fsm_plant_opt.$proc$/home/xb4syf/ASIC/gf180-demo/openlane/user_proj_example/../../verilog/rtl/plant_example.v:917$373'.
  created $dff cell `$procdff$374' with positive edge clock.
Creating register for signal `\fsm_plant_opt.\state_temperature_synth_1' using process `\fsm_plant_opt.$proc$/home/xb4syf/ASIC/gf180-demo/openlane/user_proj_example/../../verilog/rtl/plant_example.v:917$373'.
  created $dff cell `$procdff$375' with positive edge clock.
Creating register for signal `\fsm_plant_opt.\state_temperature_synth_2' using process `\fsm_plant_opt.$proc$/home/xb4syf/ASIC/gf180-demo/openlane/user_proj_example/../../verilog/rtl/plant_example.v:917$373'.
  created $dff cell `$procdff$376' with positive edge clock.
Creating register for signal `\fsm_plant_opt.\state_water_synth_1' using process `\fsm_plant_opt.$proc$/home/xb4syf/ASIC/gf180-demo/openlane/user_proj_example/../../verilog/rtl/plant_example.v:917$373'.
  created $dff cell `$procdff$377' with positive edge clock.
Creating register for signal `\fsm_plant_opt.\state_water_synth_2' using process `\fsm_plant_opt.$proc$/home/xb4syf/ASIC/gf180-demo/openlane/user_proj_example/../../verilog/rtl/plant_example.v:917$373'.
  created $dff cell `$procdff$378' with positive edge clock.
Creating register for signal `\fsm_plant_opt.\state_water_synth_0' using process `\fsm_plant_opt.$proc$/home/xb4syf/ASIC/gf180-demo/openlane/user_proj_example/../../verilog/rtl/plant_example.v:917$373'.
  created $dff cell `$procdff$379' with positive edge clock.

5.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

5.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `fsm_plant_opt.$proc$/home/xb4syf/ASIC/gf180-demo/openlane/user_proj_example/../../verilog/rtl/plant_example.v:917$373'.
Cleaned up 0 empty switches.

5.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module fsm_plant_opt.
<suppressed ~16 debug messages>
Optimizing module plant_example.

5.3. Executing FLATTEN pass (flatten design).
Deleting now unused module fsm_plant_opt.
<suppressed ~1 debug messages>

5.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module plant_example.

5.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \plant_example..
Removed 3 unused cells and 381 unused wires.
<suppressed ~7 debug messages>

5.6. Executing CHECK pass (checking for obvious problems).
Checking module plant_example...
Found and reported 0 problems.

5.7. Executing OPT pass (performing simple optimizations).

5.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module plant_example.

5.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\plant_example'.
Removed a total of 0 cells.

5.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \plant_example..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \plant_example.
Performed a total of 0 changes.

5.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\plant_example'.
Removed a total of 0 cells.

5.7.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \plant_example..

5.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module plant_example.

5.7.9. Finished OPT passes. (There is nothing left to do.)

5.8. Executing FSM pass (extract and optimize FSM).

5.8.1. Executing FSM_DETECT pass (finding FSMs in design).

5.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \plant_example..

5.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

5.9. Executing OPT pass (performing simple optimizations).

5.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module plant_example.

5.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\plant_example'.
Removed a total of 0 cells.

5.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \plant_example..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \plant_example.
Performed a total of 0 changes.

5.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\plant_example'.
Removed a total of 0 cells.

5.9.6. Executing OPT_DFF pass (perform DFF optimizations).

5.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \plant_example..

5.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module plant_example.

5.9.9. Finished OPT passes. (There is nothing left to do.)

5.10. Executing WREDUCE pass (reducing word size of cells).

5.11. Executing PEEPOPT pass (run peephole optimizers).

5.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \plant_example..

5.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module plant_example:
  created 0 $alu and 0 $macc cells.

5.14. Executing SHARE pass (SAT-based resource sharing).

5.15. Executing OPT pass (performing simple optimizations).

5.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module plant_example.

5.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\plant_example'.
Removed a total of 0 cells.

5.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \plant_example..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \plant_example.
Performed a total of 0 changes.

5.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\plant_example'.
Removed a total of 0 cells.

5.15.6. Executing OPT_DFF pass (perform DFF optimizations).

5.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \plant_example..

5.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module plant_example.

5.15.9. Finished OPT passes. (There is nothing left to do.)

5.16. Executing MEMORY pass.

5.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

5.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

5.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

5.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

5.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

5.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \plant_example..

5.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

5.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \plant_example..

5.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

5.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \plant_example..

5.18. Executing OPT pass (performing simple optimizations).

5.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module plant_example.

5.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\plant_example'.
Removed a total of 0 cells.

5.18.3. Executing OPT_DFF pass (perform DFF optimizations).

5.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \plant_example..

5.18.5. Finished fast OPT passes.

5.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

5.20. Executing OPT pass (performing simple optimizations).

5.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module plant_example.

5.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\plant_example'.
Removed a total of 0 cells.

5.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \plant_example..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \plant_example.
Performed a total of 0 changes.

5.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\plant_example'.
Removed a total of 0 cells.

5.20.6. Executing OPT_SHARE pass.

5.20.7. Executing OPT_DFF pass (perform DFF optimizations).

5.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \plant_example..

5.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module plant_example.

5.20.10. Finished OPT passes. (There is nothing left to do.)

5.21. Executing TECHMAP pass (map to technology primitives).

5.21.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~430 debug messages>

5.22. Executing OPT pass (performing simple optimizations).

5.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module plant_example.

5.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\plant_example'.
Removed a total of 0 cells.

5.22.3. Executing OPT_DFF pass (perform DFF optimizations).

5.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \plant_example..

5.22.5. Finished fast OPT passes.

5.23. Executing ABC pass (technology mapping using ABC).

5.23.1. Extracting gate netlist of module `\plant_example' to `<abc-temp-dir>/input.blif'..
Extracted 353 gates and 368 wires to a netlist network with 15 inputs and 9 outputs.

5.23.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.23.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        7
ABC RESULTS:               AND cells:        6
ABC RESULTS:              NAND cells:        6
ABC RESULTS:               NOR cells:       19
ABC RESULTS:               MUX cells:       21
ABC RESULTS:                OR cells:       76
ABC RESULTS:             ORNOT cells:       19
ABC RESULTS:            ANDNOT cells:       56
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:        internal signals:      344
ABC RESULTS:           input signals:       15
ABC RESULTS:          output signals:        9
Removing temp directory.

5.24. Executing OPT pass (performing simple optimizations).

5.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module plant_example.
<suppressed ~2 debug messages>

5.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\plant_example'.
Removed a total of 0 cells.

5.24.3. Executing OPT_DFF pass (perform DFF optimizations).

5.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \plant_example..
Removed 1 unused cells and 379 unused wires.
<suppressed ~356 debug messages>

5.24.5. Finished fast OPT passes.

5.25. Executing HIERARCHY pass (managing design hierarchy).

5.25.1. Analyzing design hierarchy..
Top module:  \plant_example

5.25.2. Analyzing design hierarchy..
Top module:  \plant_example
Removed 0 unused modules.

5.26. Printing statistics.

=== plant_example ===

   Number of wires:                249
   Number of wire bits:            401
   Number of public wires:          48
   Number of public wire bits:     200
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                216
     $_ANDNOT_                      56
     $_AND_                          6
     $_DFF_P_                        6
     $_MUX_                         21
     $_NAND_                         6
     $_NOR_                         19
     $_NOT_                          6
     $_ORNOT_                       19
     $_OR_                          76
     $_XNOR_                         1

5.27. Executing CHECK pass (checking for obvious problems).
Checking module plant_example...
Found and reported 0 problems.

6. Generating Graphviz representation of design.
Writing dot description to `/home/xb4syf/ASIC/gf180-demo/openlane/user_proj_example/runs/22_12_05_10_22/tmp/synthesis/post_techmap.dot'.
Dumping module plant_example to page 1.
Warning: WIDTHLABEL \wbs_sel_i [0] 1
Warning: WIDTHLABEL \wbs_sel_i [1] 1
Warning: WIDTHLABEL \wbs_sel_i [2] 1
Warning: WIDTHLABEL \io_in [3] 1
Warning: WIDTHLABEL \io_in [2] 1
Warning: WIDTHLABEL \io_in [1] 1
Warning: WIDTHLABEL \wbs_sel_i [2] 1
Warning: WIDTHLABEL \wbs_sel_i [1] 1
Warning: WIDTHLABEL \wbs_sel_i [2] 1
Warning: WIDTHLABEL \wbs_sel_i [1] 1
Warning: WIDTHLABEL \io_in [1] 1
Warning: WIDTHLABEL \io_in [0] 1
Warning: WIDTHLABEL \io_in [2] 1

7. Executing SHARE pass (SAT-based resource sharing).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module plant_example.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\plant_example'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \plant_example..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \plant_example.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\plant_example'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \plant_example..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module plant_example.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \plant_example..
Removed 0 unused cells and 26 unused wires.
<suppressed ~26 debug messages>

10. Printing statistics.

=== plant_example ===

   Number of wires:                223
   Number of wire bits:            337
   Number of public wires:          22
   Number of public wire bits:     136
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                216
     $_ANDNOT_                      56
     $_AND_                          6
     $_DFF_P_                        6
     $_MUX_                         21
     $_NAND_                         6
     $_NOR_                         19
     $_NOT_                          6
     $_ORNOT_                       19
     $_OR_                          76
     $_XNOR_                         1

11. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell gf180mcu_fd_sc_mcu7t5v0__dffnq_1 (noninv, pins=3, area=65.86) is a direct match for cell type $_DFF_N_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffq_1 (noninv, pins=3, area=63.66) is a direct match for cell type $_DFF_P_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffnrnq_1 (noninv, pins=4, area=74.64) is a direct match for cell type $_DFF_NN0_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffnsnq_1 (noninv, pins=4, area=79.03) is a direct match for cell type $_DFF_NN1_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffrnq_1 (noninv, pins=4, area=74.64) is a direct match for cell type $_DFF_PN0_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffsnq_1 (noninv, pins=4, area=79.03) is a direct match for cell type $_DFF_PN1_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffnrsnq_1 (noninv, pins=5, area=94.39) is a direct match for cell type $_DFFSR_NNN_.
  cell gf180mcu_fd_sc_mcu7t5v0__dffrsnq_1 (noninv, pins=5, area=85.61) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \gf180mcu_fd_sc_mcu7t5v0__dffnq_1 _DFF_N_ (.CLKN( C), .D( D), .Q( Q));
    \gf180mcu_fd_sc_mcu7t5v0__dffq_1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    \gf180mcu_fd_sc_mcu7t5v0__dffnrnq_1 _DFF_NN0_ (.CLKN( C), .D( D), .Q( Q), .RN( R));
    \gf180mcu_fd_sc_mcu7t5v0__dffnsnq_1 _DFF_NN1_ (.CLKN( C), .D( D), .Q( Q), .SETN( R));
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \gf180mcu_fd_sc_mcu7t5v0__dffrnq_1 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RN( R));
    \gf180mcu_fd_sc_mcu7t5v0__dffsnq_1 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SETN( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \gf180mcu_fd_sc_mcu7t5v0__dffnrsnq_1 _DFFSR_NNN_ (.CLKN( C), .D( D), .Q( Q), .RN( R), .SETN( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \gf180mcu_fd_sc_mcu7t5v0__dffrsnq_1 _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .RN( R), .SETN( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

11.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\plant_example':
  mapped 6 $_DFF_P_ cells to \gf180mcu_fd_sc_mcu7t5v0__dffq_1 cells.

12. Printing statistics.

=== plant_example ===

   Number of wires:                223
   Number of wire bits:            337
   Number of public wires:          22
   Number of public wire bits:     136
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                216
     $_ANDNOT_                      56
     $_AND_                          6
     $_MUX_                         21
     $_NAND_                         6
     $_NOR_                         19
     $_NOT_                          6
     $_ORNOT_                       19
     $_OR_                          76
     $_XNOR_                         1
     gf180mcu_fd_sc_mcu7t5v0__dffq_1      6

[INFO]: USING STRATEGY AREA 0

13. Executing ABC pass (technology mapping using ABC).

13.1. Extracting gate netlist of module `\plant_example' to `/tmp/yosys-abc-9IHGfo/input.blif'..
Extracted 210 gates and 225 wires to a netlist network with 15 inputs and 9 outputs.

13.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-9IHGfo/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-9IHGfo/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-9IHGfo/input.blif 
ABC: + read_lib -w /home/xb4syf/ASIC/gf180-demo/openlane/user_proj_example/runs/22_12_05_10_22/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.16 sec
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__antenna" without logic function.
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__bufz_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__bufz_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__bufz_3".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__bufz_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__bufz_8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__bufz_12".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__bufz_16".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnrnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnrnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnrnq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnrsnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnrsnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnrsnq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnsnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnsnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffnsnq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffrnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffrnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffrnq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffrsnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffrsnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffrsnq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffsnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffsnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__dffsnq_4".
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__endcap" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fill_1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fill_2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fill_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fill_8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fill_16" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fill_32" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fill_64" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fillcap_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fillcap_8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fillcap_16" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fillcap_32" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__fillcap_64" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__filltie" without logic function.
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__hold".
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__icgtn_1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__icgtn_2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__icgtn_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__icgtp_1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__icgtp_2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "gf180mcu_fd_sc_mcu7t5v0__icgtp_4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__invz_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__invz_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__invz_3".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__invz_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__invz_8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__invz_12".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "gf180mcu_fd_sc_mcu7t5v0__invz_16".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latrnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latrnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latrnq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latrsnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latrsnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latrsnq_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latsnq_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latsnq_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "gf180mcu_fd_sc_mcu7t5v0__latsnq_4".
ABC: Library "gf180mcuC_merged" from "/home/xb4syf/ASIC/gf180-demo/openlane/user_proj_example/runs/22_12_05_10_22/tmp/synthesis/trimmed.lib" has 143 cells (72 skipped: 36 seq; 15 tri-state; 21 no func; 0 dont_use).  Time =     0.30 sec
ABC: Memory =   23.60 MB. Time =     0.30 sec
ABC: Warning: Detected 6 multi-output gates (for example, "gf180mcu_fd_sc_mcu7t5v0__addf_1").
ABC: + read_constr -v /home/xb4syf/ASIC/gf180-demo/openlane/user_proj_example/runs/22_12_05_10_22/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "gf180mcu_fd_sc_mcu7t5v0__inv_1".
ABC: Setting output load to be 72.910004.
ABC: + read_constr /home/xb4syf/ASIC/gf180-demo/openlane/user_proj_example/runs/22_12_05_10_22/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 30000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 30000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 4 -S 3000.0 
ABC: + upsize -D 30000.0 
ABC: Current delay (3896.03 ps) does not exceed the target delay (30000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 30000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =     67 ( 20.9 %)   Cap = 16.1 ff (  4.8 %)   Area =     1047.11 ( 86.6 %)   Delay =  3992.42 ps  ( 13.4 %)               
ABC: Path  0 --       1 : 0    4 pi                                A =   0.00  Df = 160.6  -60.2 ps  S = 327.7 ps  Cin =  0.0 ff  Cout =  16.8 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      28 : 1    2 gf180mcu_fd_sc_mcu7t5v0__clkinv_1 A =   8.78  Df = 326.2  -79.6 ps  S = 194.6 ps  Cin =  4.2 ff  Cout =   6.9 ff  Cmax = 228.4 ff  G =  163  
ABC: Path  2 --      29 : 1    4 gf180mcu_fd_sc_mcu7t5v0__buf_1    A =  13.17  Df = 672.2 -103.0 ps  S = 310.4 ps  Cin =  2.9 ff  Cout =  15.4 ff  Cmax = 238.8 ff  G =  537  
ABC: Path  3 --      30 : 2    4 gf180mcu_fd_sc_mcu7t5v0__or2_1    A =  17.56  Df =1189.7 -243.3 ps  S = 352.0 ps  Cin =  2.9 ff  Cout =  17.9 ff  Cmax = 238.8 ff  G =  628  
ABC: Path  4 --      52 : 2    2 gf180mcu_fd_sc_mcu7t5v0__nor2_1   A =  13.17  Df =1495.0 -363.0 ps  S = 430.7 ps  Cin =  4.4 ff  Cout =   9.6 ff  Cmax = 125.1 ff  G =  220  
ABC: Path  5 --      87 : 2    1 gf180mcu_fd_sc_mcu7t5v0__nand2_1  A =  10.98  Df =1606.2 -321.4 ps  S = 166.0 ps  Cin =  4.7 ff  Cout =   2.8 ff  Cmax = 212.6 ff  G =   59  
ABC: Path  6 --      88 : 2    1 gf180mcu_fd_sc_mcu7t5v0__and2_1   A =  17.56  Df =1868.5  -80.7 ps  S = 127.8 ps  Cin =  2.8 ff  Cout =   2.9 ff  Cmax = 237.8 ff  G =  102  
ABC: Path  7 --      89 : 1    2 gf180mcu_fd_sc_mcu7t5v0__buf_1    A =  13.17  Df =2677.1 -120.4 ps  S =1329.1 ps  Cin =  2.9 ff  Cout =  77.2 ff  Cmax = 238.8 ff  G = 2685  
ABC: Path  8 --      90 : 2    1 gf180mcu_fd_sc_mcu7t5v0__nor2_1   A =  13.17  Df =3992.4 -373.6 ps  S =2308.4 ps  Cin =  4.4 ff  Cout =  72.9 ff  Cmax = 125.1 ff  G = 1671  
ABC: Start-point = pi0 (\wbs_we_i).  End-point = po6 (\fsm_plant_opt.tmp3553).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   15/    9  lat =    0  nd =    67  edge =    161  area =1047.13  delay = 8.00  lev = 8
ABC: + write_blif /tmp/yosys-abc-9IHGfo/output.blif 

13.1.2. Re-integrating ABC results.
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__or2_1 cells:        2
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__nand4_1 cells:        1
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__and3_1 cells:        2
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__mux2_2 cells:        1
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__nand3_1 cells:        3
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__nor4_1 cells:        3
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__oai211_1 cells:        1
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__or3_1 cells:        1
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__nor3_1 cells:        1
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__aoi22_1 cells:        2
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__clkinv_1 cells:        6
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__oai21_1 cells:        5
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__and4_1 cells:        4
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__inv_1 cells:        2
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__nand2_1 cells:       12
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__and2_1 cells:        3
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__buf_1 cells:        6
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__nor2_1 cells:        6
ABC RESULTS:   gf180mcu_fd_sc_mcu7t5v0__aoi21_1 cells:        6
ABC RESULTS:        internal signals:      201
ABC RESULTS:           input signals:       15
ABC RESULTS:          output signals:        9
Removing temp directory.

14. Executing SETUNDEF pass (replace undef values with defined constants).

15. Executing HILOMAP pass (mapping to constant drivers).

16. Executing SPLITNETS pass (splitting up multi-bit signals).

17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \plant_example..
Removed 0 unused cells and 301 unused wires.
<suppressed ~4 debug messages>

18. Executing INSBUF pass (insert buffer cells for connected wires).

19. Executing CHECK pass (checking for obvious problems).
Checking module plant_example...
Warning: Wire plant_example.\io_out [37] is used but has no driver.
Warning: Wire plant_example.\io_out [36] is used but has no driver.
Warning: Wire plant_example.\io_out [35] is used but has no driver.
Warning: Wire plant_example.\io_out [34] is used but has no driver.
Warning: Wire plant_example.\io_out [33] is used but has no driver.
Warning: Wire plant_example.\io_out [32] is used but has no driver.
Warning: Wire plant_example.\io_out [31] is used but has no driver.
Warning: Wire plant_example.\io_out [30] is used but has no driver.
Warning: Wire plant_example.\io_out [29] is used but has no driver.
Warning: Wire plant_example.\io_out [28] is used but has no driver.
Warning: Wire plant_example.\io_out [27] is used but has no driver.
Warning: Wire plant_example.\io_out [26] is used but has no driver.
Warning: Wire plant_example.\io_out [25] is used but has no driver.
Warning: Wire plant_example.\io_out [24] is used but has no driver.
Warning: Wire plant_example.\io_out [23] is used but has no driver.
Warning: Wire plant_example.\io_out [22] is used but has no driver.
Warning: Wire plant_example.\io_out [21] is used but has no driver.
Warning: Wire plant_example.\io_out [20] is used but has no driver.
Warning: Wire plant_example.\io_out [19] is used but has no driver.
Warning: Wire plant_example.\io_out [18] is used but has no driver.
Warning: Wire plant_example.\io_out [17] is used but has no driver.
Warning: Wire plant_example.\io_out [16] is used but has no driver.
Warning: Wire plant_example.\io_out [15] is used but has no driver.
Warning: Wire plant_example.\io_out [14] is used but has no driver.
Warning: Wire plant_example.\io_out [13] is used but has no driver.
Warning: Wire plant_example.\io_out [12] is used but has no driver.
Warning: Wire plant_example.\io_out [11] is used but has no driver.
Warning: Wire plant_example.\io_out [10] is used but has no driver.
Warning: Wire plant_example.\io_out [9] is used but has no driver.
Warning: Wire plant_example.\io_out [8] is used but has no driver.
Warning: Wire plant_example.\io_out [7] is used but has no driver.
Warning: Wire plant_example.\io_out [6] is used but has no driver.
Warning: Wire plant_example.\io_out [5] is used but has no driver.
Warning: Wire plant_example.\io_out [4] is used but has no driver.
Warning: Wire plant_example.\io_out [3] is used but has no driver.
Warning: Wire plant_example.\io_out [2] is used but has no driver.
Warning: Wire plant_example.\io_out [1] is used but has no driver.
Warning: Wire plant_example.\io_out [0] is used but has no driver.
Warning: Wire plant_example.\io_oeb [37] is used but has no driver.
Warning: Wire plant_example.\io_oeb [36] is used but has no driver.
Warning: Wire plant_example.\io_oeb [35] is used but has no driver.
Warning: Wire plant_example.\io_oeb [34] is used but has no driver.
Warning: Wire plant_example.\io_oeb [33] is used but has no driver.
Warning: Wire plant_example.\io_oeb [32] is used but has no driver.
Warning: Wire plant_example.\io_oeb [31] is used but has no driver.
Warning: Wire plant_example.\io_oeb [30] is used but has no driver.
Warning: Wire plant_example.\io_oeb [29] is used but has no driver.
Warning: Wire plant_example.\io_oeb [28] is used but has no driver.
Warning: Wire plant_example.\io_oeb [27] is used but has no driver.
Warning: Wire plant_example.\io_oeb [26] is used but has no driver.
Warning: Wire plant_example.\io_oeb [25] is used but has no driver.
Warning: Wire plant_example.\io_oeb [24] is used but has no driver.
Warning: Wire plant_example.\io_oeb [23] is used but has no driver.
Warning: Wire plant_example.\io_oeb [22] is used but has no driver.
Warning: Wire plant_example.\io_oeb [21] is used but has no driver.
Warning: Wire plant_example.\io_oeb [20] is used but has no driver.
Warning: Wire plant_example.\io_oeb [19] is used but has no driver.
Warning: Wire plant_example.\io_oeb [18] is used but has no driver.
Warning: Wire plant_example.\io_oeb [17] is used but has no driver.
Warning: Wire plant_example.\io_oeb [16] is used but has no driver.
Warning: Wire plant_example.\io_oeb [15] is used but has no driver.
Warning: Wire plant_example.\io_oeb [14] is used but has no driver.
Warning: Wire plant_example.\io_oeb [13] is used but has no driver.
Warning: Wire plant_example.\io_oeb [12] is used but has no driver.
Warning: Wire plant_example.\io_oeb [11] is used but has no driver.
Warning: Wire plant_example.\io_oeb [10] is used but has no driver.
Warning: Wire plant_example.\io_oeb [9] is used but has no driver.
Warning: Wire plant_example.\io_oeb [8] is used but has no driver.
Warning: Wire plant_example.\io_oeb [7] is used but has no driver.
Warning: Wire plant_example.\io_oeb [6] is used but has no driver.
Warning: Wire plant_example.\io_oeb [5] is used but has no driver.
Warning: Wire plant_example.\io_oeb [4] is used but has no driver.
Warning: Wire plant_example.\io_oeb [3] is used but has no driver.
Warning: Wire plant_example.\io_oeb [2] is used but has no driver.
Warning: Wire plant_example.\io_oeb [1] is used but has no driver.
Warning: Wire plant_example.\io_oeb [0] is used but has no driver.
Found and reported 76 problems.

20. Printing statistics.

=== plant_example ===

   Number of wires:                 77
   Number of wire bits:            191
   Number of public wires:          19
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                146
     gf180mcu_fd_sc_mcu7t5v0__and2_1      3
     gf180mcu_fd_sc_mcu7t5v0__and3_1      2
     gf180mcu_fd_sc_mcu7t5v0__and4_1      4
     gf180mcu_fd_sc_mcu7t5v0__aoi21_1      6
     gf180mcu_fd_sc_mcu7t5v0__aoi22_1      2
     gf180mcu_fd_sc_mcu7t5v0__buf_1      6
     gf180mcu_fd_sc_mcu7t5v0__clkinv_1      6
     gf180mcu_fd_sc_mcu7t5v0__dffq_1      6
     gf180mcu_fd_sc_mcu7t5v0__inv_1      2
     gf180mcu_fd_sc_mcu7t5v0__mux2_2      1
     gf180mcu_fd_sc_mcu7t5v0__nand2_1     12
     gf180mcu_fd_sc_mcu7t5v0__nand3_1      3
     gf180mcu_fd_sc_mcu7t5v0__nand4_1      1
     gf180mcu_fd_sc_mcu7t5v0__nor2_1      6
     gf180mcu_fd_sc_mcu7t5v0__nor3_1      1
     gf180mcu_fd_sc_mcu7t5v0__nor4_1      3
     gf180mcu_fd_sc_mcu7t5v0__oai211_1      1
     gf180mcu_fd_sc_mcu7t5v0__oai21_1      5
     gf180mcu_fd_sc_mcu7t5v0__or2_1      2
     gf180mcu_fd_sc_mcu7t5v0__or3_1      1
     gf180mcu_fd_sc_mcu7t5v0__tiel     73

   Chip area for module '\plant_example': 2070.073600

21. Executing Verilog backend.

21.1. Executing BMUXMAP pass.

21.2. Executing DEMUXMAP pass.
Dumping module `\plant_example'.

Warnings: 87 unique messages, 93 total
End of script. Logfile hash: 8d4c9dc63d, CPU: user 1.48s system 0.07s, MEM: 58.64 MB peak
Yosys 0.22 (git sha1 f109fa3d4c5, gcc 8.3.1 -fPIC -Os)
Time spent: 34% 2x abc (0 sec), 22% 4x stat (0 sec), ...
